@use './variables' as var;
/*
classベースでデザインするためによく使うstyleをクラス化するscss
*/
/*
::beforeや::afterに関するstyle
*/
/*
単一機能を表す責務を負うcss class
*/
.font-family-main {
  font-family: Roboto, '游ゴシック体', YuGothic, '游ゴシック Medium', 'Yu Gothic Medium',
    '游ゴシック', 'Yu Gothic', 'Hiragino Kaku Gothic ProN', 'ヒラギノ角ゴ ProN W3', 'メイリオ' !important;
}

/*
単一プロパティを表す責務を負うcss class
*/
$transition: ease, ease-out, ease-in, ease-in-out;
$transition-time: (
  'short': 0.1s,
  'medium': 0.3s,
  'long': 0.5s
);
@each $i in $transition {
  @each $k, $v in $transition-time {
    .transition-#{$k}-#{$i} {
      transition: all $v $i 0s !important;
    }
  }
}
$cursor: alias, all-scroll, cell, copy, context-menu, crosshair, default, grab, grabbing, help, move,
  no-drop, not-allowed, progress, wait, pointer, text, vertical-text, zoom-in, zoom-out, unset;
@each $i in $cursor {
  .cursor-#{$i} {
    cursor: $i !important;
  }
}
$vertical-align: text-bottom, text-top, sub, super;
@each $i in $vertical-align {
  .align-#{$i} {
    vertical-align: $i !important;
  }
}
$word-break: break-word, break-all, keep-all, normal, unset;
@each $i in $word-break {
  @if $i == break-word {
    .word-break {
      word-break: break-word;
    }
  } @else if $i == break-all {
    .word-break-all {
      word-break: break-all;
    }
  } @else {
    .word-break-#{$i} {
      word-break: $i;
    }
  }
}
$white-space: wrap, nowrap, break-spaces, normal, pre, pre-line, pre-wrap, unset;
@each $i in $white-space {
  .white-space-#{$i} {
    white-space: $i;
  }
}
$text-overflow: ellipsis, clip, unset;
@each $i in $text-overflow {
  .text-overflow-#{$i} {
    text-overflow: $i;
  }
}
$mix-blend-mode: normal, luminosity, screen, unset;
@each $i in $mix-blend-mode {
  .mix-blend-#{$i} {
    mix-blend-mode: $i;
  }
}
$line-height: (
  'xs': 1,
  'sm': 1.15,
  'md': 1.2,
  'lg': 1.5,
  'xl': 1.8
);
@each $k, $v in $line-height {
  .line-height-#{$k} {
    line-height: $v !important;
  }
}
$border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset;
@each $i in $border-style {
  .border-#{$i} {
    border-style: $i;
  }
  .border-top-#{$i} {
    border-top-style: $i;
  }
  .border-right-#{$i} {
    border-right-style: $i;
  }
  .border-left-#{$i} {
    border-left-style: $i;
  }
  .border-bottom-#{$i} {
    border-bottom-style: $i;
  }
}
/*
数量系の単一プロパティを表す責務を負うclass
*/
@for $i from 0 through 10 {
  .border-width-#{$i} {
    border-width: 1px * $i !important;
  }
  .z-index-#{$i} {
    z-index: $i !important;
  }
  .opacity-dot#{$i} {
    opacity: 0.1 * $i !important;
  }
  .line-clamp-#{$i} {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $i;
  }
  .flex-#{$i} {
    flex-grow: $i;
    flex-shrink: $i;
  }
}
@for $i from 0 through 100 {
  .line-height-#{$i} {
    line-height: $i * 1px !important;
  }
  .w-#{$i} {
    width: $i * 1% !important;
  }
  .h-#{$i} {
    height: $i * 1% !important;
  }
}
@for $i from 0 through 200 {
  .top-#{$i} {
    top: $i * 1px;
  }
  .right-#{$i} {
    right: $i * 1px;
  }
  .left-#{$i} {
    left: $i * 1px;
  }
  .bottom-#{$i} {
    bottom: $i * 1px;
  }
  .top-n#{$i} {
    top: $i * -1px;
  }
  .right-n#{$i} {
    right: $i * -1px;
  }
  .left-n#{$i} {
    left: $i * -1px;
  }
  .bottom-n#{$i} {
    bottom: $i * -1px;
  }
  .border-radius-#{$i} {
    border-radius: $i * 1px !important;
  }
  .letter-spacing-#{$i} {
    letter-spacing: $i * 0.1px !important;
  }
}
@for $i from 0 through 300 {
  .height-#{$i} {
    height: $i * 1px !important;
  }
  .width-#{$i} {
    width: $i * 1px !important;
  }
  .min-height-#{$i} {
    min-height: $i * 1px !important;
  }
  .min-width-#{$i} {
    min-width: $i * 1px !important;
  }
  .max-height-#{$i} {
    max-height: $i * 1px !important;
  }
  .max-width-#{$i} {
    max-width: $i * 1px !important;
  }
}
